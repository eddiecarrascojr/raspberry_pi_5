Using ARM Assembly 32 bit V7 and running on a Raspberry Pi 5.

We want to create a RSA algorithm with the following requirements.
Minimal requirements for the assignment:
1. Display prompts for user actions:
      a. Generate Private and Public Keys
      b. Encrypt a Message

2. In order to Generate Private and Public Keys
    a. Display prompts to input two positive integers p and q. For simplicity, let’s keep p < 50 and q < 50. Can be larger is implementing the function for large values.
    b. Check if both integers are prime
    c. Calculate the modulus n for the public and private keys: n = p * q
    d. Calculate the totient: Φ(n) = (p – 1) (q – 1)
    e. Display a prompt and input a small public key exponent value e
    f. Implement the following parameters for the public key exponent e
         i. e must be a positive integer
         ii. 1 < e < Φ(n)
        iii. e is co-prime to Φ(n). This means that e and Φ(n) share no common factors other than 1. In other words, gcd(e, Φ(n)) = 1 gcd : greatest common divisor.
    g. Write an ARM function, cpubexp for calculating the public key exponent. Additionally, write an ARM gcd function to find the greatest common divisor used in calculating the public key exponent.
    h. Calculate the private key exponent d such that de ≡ 1 (mod Φ(n)) ➔ d = (1 + x * Φ(n) ) / e for some integer x

The following functions must be included:
1. gcd – function to find the greatest common divisor
2. pow – function to perform exponentiation
3. modulo – function to perform modulo operation
4. cpubexp – function for all calculations related to the public key exponent
5. cprivexp – function for all calculations related to the private key exponent
6. encrypt – function to perform encryption
